name: Daily TIL Summary
 
# 매일 아침 9시(베를린 시간)에 실행되며, 수동 실행도 가능하도록 설정
on:
  schedule:
    - cron: '0 8 * * *'  # UTC+1(베를린) 기준 오전 9시
  workflow_dispatch:      # 수동 실행 옵션

jobs:
  send-daily-summary:
    runs-on: ubuntu-latest

    steps:
      # 리포지토리 코드를 가져오기
      - name: Checkout repository
        uses: actions/checkout@v2

      # 당일 변경된 파일 확인 및 요약 생성
      - name: Get today's changed files
        id: changed-files
        env:
          TZ: 'Europe/Berlin'  # 베를린 시간대 직접 설정
        run: |
          # ======================= DATE =======================
          # date: 날짜 관련 명령어
          # -d "yesterday": 어제 날짜를 지정하는 옵션
          # +%Y: 4자리 연도
          # +%m: 2자리 월
          # +%d: 2자리 일
          # +%Y-%m-%d: YYYY-MM-DD 형식으로 출력
          TODAY=$(date -d "yesterday" +%Y-%m-%d)
          echo "어제 날짜: $TODAY" # 어제 날짜: 2024-01-16
          
          # ======================= CHANGES =======================
          # 당일 수정된 md 파일 찾기 (.github 폴더 제외)
          # 오늘 하루동안 수정된 .md 파일들을 찾습니다
          # 결과: 
          # - .github 폴더를 제외한 모든 .md 파일 중
          # - 오늘 00:00 ~ 23:59 사이에 수정된 파일들의 경로가 출력됩니다
          # - 예: ./ai/langchain.md
          #      ./python/decorator.md 
          
          # git diff: 변경된 파일 확인
          # --name-only: 파일 이름만 출력
          # --diff-filter=M: Modified(수정된) 파일만 필터링
          # --since="${TODAY} 00:00": 오늘 00:00부터
          # --until="${TODAY} 23:59": 오늘 23:59까지
          # -- "*.md": .md 파일만 검색
          # | grep -v "^.github/": .github 디렉토리 제외
          CHANGES=$(git diff --name-only --diff-filter=M --since="${TODAY} 00:00" --until="${TODAY} 23:59" -- "*.md" | grep -v "^.github/")
          echo "변경된 파일 목록: $CHANGES"
          # "예시 결과: ./ai/langchain.md"
          
          # ======================= SUMMARY =======================
          # 변경된 파일이 있는 경우
          if [ -n "$CHANGES" ]; then
            # 멀티라인 환경변수 시작
            echo "SUMMARY<<EOF" >> $GITHUB_ENV
            # 메시지 헤더 추가
            echo "📚 오늘의 TIL 요약 (${TODAY})" >> $GITHUB_ENV
            
            echo "" >> $GITHUB_ENV
            
            # 각 변경된 파일에 대해
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                echo "---" >> $GITHUB_ENV
                # 파일의 첫 줄(제목) 추출하여 '#' 제거 후 '*'로 감싸서 출력
                head -n 1 "$file" | sed 's/^#\s*/\*/' | sed 's/$/\*/' >> $GITHUB_ENV
                
                # 파일 경로에서 ./ 제거하고 이탤릭체로 출력
                CLEAN_PATH=$(echo "$file" | sed 's|^\./||')
                echo "_${CLEAN_PATH}_" >> $GITHUB_ENV
                
                # 파일 내용 전체를 가져와서 첫 줄(제목)을 제외하고 출력
                echo "> $(tail -n +2 "$file")" | sed 's/^/> /' >> $GITHUB_ENV
                echo "" >> $GITHUB_ENV
              fi
            done <<< "$CHANGES"
            # 멀티라인 환경변수 종료
            echo "EOF" >> $GITHUB_ENV
          else
            # 변경된 파일이 없는 경우
            echo "SUMMARY=오늘은 새로운 TIL이 없습니다. 😅" >> $GITHUB_ENV
          fi

      # Slack으로 요약 전송
      - name: Send summary to Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # curl을 사용하여 Slack webhook으로 메시지 전송
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"${{ env.SUMMARY }}\"
            }" \
            $SLACK_WEBHOOK_URL