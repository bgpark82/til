name: Daily TIL Summary

# 매일 아침 9시(베를린 시간)에 실행되며, 수동 실행도 가능하도록 설정
on:
  schedule:
    - cron: '0 8 * * *'  # UTC+1(베를린) 기준 오전 9시
  workflow_dispatch:      # 수동 실행 옵션

jobs:
  send-daily-summary:
    runs-on: ubuntu-latest
    
    steps:
      # 리포지토리 코드를 가져오기
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # 전체 히스토리를 가져옴

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai
          sudo apt-get update
          sudo apt-get install -y jq  # jq 설치 추가

      # 전날 변경된 파일 확인 및 요약 생성
      - name: Get yesterday's changed files and summarize
        id: changed-files
        env:
          TZ: 'Europe/Berlin'
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          TODAY=$(date +%Y-%m-%d)
          YESTERDAY=$(date -d "yesterday" +%Y-%m-%d)
          
          # git log를 사용하여 어제 날짜의 모든 변경사항 확인
          CHANGES=$(git log --since="$YESTERDAY 00:00:00" --until="$YESTERDAY 23:59:59" --name-only --format="" | grep '\.md$' | grep -v '^\.github/' | sort -u)
          
          # 변경된 파일이 있는 경우
          if [ -n "$CHANGES" ]; then
            # 임시 파일에 요약 내용 저장
            TEMP_FILE=$(mktemp)
            
            # 헤더 추가
            echo "📚 *오늘의 TIL 요약 (${TODAY})*" > "$TEMP_FILE"
            echo "" >> "$TEMP_FILE"
            
            # 각 변경된 파일에 대해
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                echo "---" >> "$TEMP_FILE"
                
                # 파이썬 스크립트를 사용하여 요약 생성
                RESULT=$(python .github/scripts/summarize.py "$file")
                
                # JSON 결과에서 필요한 정보 추출
                TITLE=$(echo "$RESULT" | jq -r '.title')
                PATH=$(echo "$RESULT" | jq -r '.path')
                SUMMARY=$(echo "$RESULT" | jq -r '.summary')
                
                echo "🎯 *${TITLE}*" >> "$TEMP_FILE"
                echo "_${PATH}_" >> "$TEMP_FILE"
                echo "> ${SUMMARY}" >> "$TEMP_FILE"
                echo "" >> "$TEMP_FILE"
              fi
            done <<< "$CHANGES"
            
            # 임시 파일의 내용을 GITHUB_ENV에 설정
            echo "SUMMARY<<EOF" >> $GITHUB_ENV
            cat "$TEMP_FILE" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            # 임시 파일 삭제
            rm "$TEMP_FILE"
          else
            # 변경된 파일이 없는 경우
            echo "SUMMARY=어제는 새로운 TIL이 없었습니다. 😅" >> $GITHUB_ENV
          fi

      # Slack으로 요약 전송
      - name: Send summary to Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # curl을 사용하여 Slack webhook으로 메시지 전송
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"${{ env.SUMMARY }}\"
            }" \
            $SLACK_WEBHOOK_URL





