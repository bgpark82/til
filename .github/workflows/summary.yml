name: Daily TIL Summary

# 매일 아침 9시(베를린 시간)에 실행되며, 수동 실행도 가능하도록 설정
on:
  schedule:
    - cron: '0 8 * * *'  # UTC+1(베를린) 기준 오전 9시
  workflow_dispatch:      # 수동 실행 옵션

jobs:
  send-daily-summary:
    runs-on: ubuntu-latest
    
    steps:
      # 리포지토리 코드를 가져오기
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # 전체 히스토리를 가져옴

      # 전날 변경된 파일 확인 및 요약 생성
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Get and summarize yesterday's changes
        id: changed-files
        env:
          TZ: 'Europe/Berlin'
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python << 'EOF'
          import os
          import subprocess
          from datetime import datetime, timedelta
          import openai

          # OpenAI API 설정
          openai.api_key = os.getenv('OPENAI_API_KEY')

          def get_file_content(file_path):
              with open(file_path, 'r', encoding='utf-8') as f:
                  return f.read()

          # 어제 날짜 구하기
          today = datetime.now()
          yesterday = (today - timedelta(days=1)).strftime('%Y-%m-%d')
          
          # 어제 변경된 파일 찾기
          cmd = f"git log --since='{yesterday} 00:00:00' --until='{yesterday} 23:59:59' --name-only --format='' | grep '\\.md$' | grep -v '^\.github/' | sort -u"
          changes = subprocess.getoutput(cmd).strip().split('\n')
          
          if changes and changes[0]:
              summary = f"📚 *오늘의 TIL 요약 ({today.strftime('%Y-%m-%d')})*\n\n"
              
              for file in changes:
                  if os.path.exists(file):
                      content = get_file_content(file)
                      
                      # ChatGPT API를 사용하여 내용 요약
                      response = openai.ChatCompletion.create(
                          model="gpt-3.5-turbo",
                          messages=[
                              {"role": "system", "content": "마크다운 문서의 내용을 2-3문장으로 간단히 요약해주세요."},
                              {"role": "user", "content": content}
                          ]
                      )
                      
                      ai_summary = response.choices[0].message.content
                      
                      # 파일의 첫 줄(제목)
                      title = content.split('\n')[0].replace('#', '').strip()
                      
                      summary += f"---\n"
                      summary += f"🎯 *{title}*\n"
                      summary += f"_{file}_\n"
                      summary += f"> {ai_summary}\n\n"
          else:
              summary = "오늘은 새로운 TIL이 없습니다. 😅"

          # GitHub Actions 환경 변수로 저장
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              f.write(f"SUMMARY<<EOF\n{summary}\nEOF\n")
          EOF

      # Slack으로 요약 전송
      - name: Send summary to Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # curl을 사용하여 Slack webhook으로 메시지 전송
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"${{ env.SUMMARY }}\"}" \
            $SLACK_WEBHOOK_URL





